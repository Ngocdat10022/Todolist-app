{"version":3,"sources":["Component/Todo.js","Component/Todolist.js","App.js","index.js"],"names":["ButtonStyle","styled","Button","p","iscompleted","css","Todo","todo","checkBtnInput","shouldFitContainer","iconAfter","className","onClick","id","primaryColor","name","Todolist","todolist","map","TODO_APP_STORAGE_KEY","App","useState","setTodolist","textInput","setTextInput","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","handlTodoList","useCallback","prev","v4","value","onChange","e","target","placeholder","elemAfterInput","appearance","isDisabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAGMA,EAAcC,YAAOC,IAAPD,CAAH,6XAKX,SAACE,GAAD,OACJA,EAAEC,aACFC,YADA,kGA2CaC,MAvBf,YAAwC,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,cACpB,OACE,mCACE,cAACR,EAAD,CACEI,YAAaG,EAAKH,YAClBK,oBAAkB,EAClBC,WACGH,EAAKH,aACJ,sBAAMO,UAAU,aAAhB,SACE,cAAC,IAAD,CACEC,QAAS,kBAAMJ,EAAcD,EAAKM,KAClCC,aAAa,YARvB,SAcGP,EAAKQ,UCjCCC,MAVf,YAAgD,IAA5BC,EAA2B,EAA3BA,SAAUT,EAAiB,EAAjBA,cAC5B,OACE,mCACGS,EAASC,KAAI,SAACX,GAAD,OACZ,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,cAAeA,GAApCD,EAAKM,UCFlBM,EAAuB,WAkEdC,MAjEf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOJ,EAAP,KAAiBK,EAAjB,KACA,EAAkCD,mBAAS,IAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACAC,qBAAU,WACJC,aAAaC,QAAQR,IACvBG,EAAYM,KAAKC,MAAMH,aAAaC,QAAQR,OAC7C,IAGHM,qBAAU,WACRC,aAAaI,QAAQX,EAAsBS,KAAKG,UAAUd,MACzD,CAACA,IAEJ,IAAMe,EAAgBC,uBAAY,WAChCX,GAAY,SAACY,GAAD,OACV,CACErB,GAAIsB,cACJpB,KAAMQ,EACNnB,aAAa,IAJL,mBAMP8B,OAELV,EAAa,MACZ,CAACD,EAAWN,IAETT,EAAgByB,uBAAY,SAACpB,GACjCS,GAAY,SAACY,GAAD,OACVA,EAAKhB,KAAI,SAACX,GAAD,OACPA,EAAKM,KAAOA,EAAZ,2BAAsBN,GAAtB,IAA4BH,aAAa,IAASG,UAGrD,IACH,OACE,qBAAKI,UAAU,iBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,iDACA,cAAC,IAAD,CACEyB,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAac,EAAEC,OAAOH,QACvCrB,KAAK,WACLyB,YAAY,oCACZC,eACE,mCACE,cAAC,IAAD,CACEC,WAAY,UACZC,YAAapB,EACbX,QAASoB,EAHX,qBAUN,cAAC,EAAD,CAAUf,SAAUA,EAAUT,cAAeA,IAC7C,cAAC,IAAD,CACEkC,WAAY,UACZC,YAAY,EACZ/B,QAAS,kBAAMU,EAAY,KAH7B,0BCvDRsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.854020e0.chunk.js","sourcesContent":["import Button from \"@atlaskit/button\";\r\nimport styled, { css } from \"styled-components\";\r\nimport StarFilledIcon from \"@atlaskit/icon/glyph/check\";\r\nconst ButtonStyle = styled(Button)`\r\n  margin-top: 5px;\r\n  text-align: left;\r\n\r\n  &,&:hover {\r\n    ${(p) =>\r\n  p.iscompleted &&\r\n  css`\r\n        text-decoration: line-through;\r\n      `}\r\n  }\r\n\r\n  &:hover {\r\n    .check-icon {\r\n      display: inline-block;\r\n    }\r\n  }\r\n  .check-icon {\r\n    display: none;\r\n\r\n    &:hover {\r\n      border-radius: 3px;\r\n      background: #fff;\r\n    }\r\n  }\r\n`;\r\nfunction Todo({ todo, checkBtnInput }) {\r\n  return (\r\n    <>\r\n      <ButtonStyle\r\n        iscompleted={todo.iscompleted}\r\n        shouldFitContainer\r\n        iconAfter={\r\n          !todo.iscompleted && (\r\n            <span className=\"check-icon\">\r\n              <StarFilledIcon\r\n                onClick={() => checkBtnInput(todo.id)}\r\n                primaryColor=\"green\"\r\n              ></StarFilledIcon>\r\n            </span>\r\n          )\r\n        }\r\n      >\r\n        {todo.name}\r\n      </ButtonStyle>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction Todolist({ todolist, checkBtnInput }) {\r\n  return (\r\n    <>\r\n      {todolist.map((todo) => (\r\n        <Todo key={todo.id} todo={todo} checkBtnInput={checkBtnInput}></Todo>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todolist;\r\n","import Button from \"@atlaskit/button\";\nimport Textfield from \"@atlaskit/textfield\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { v4 } from \"uuid\";\nimport Todolist from \"./Component/Todolist\";\nconst TODO_APP_STORAGE_KEY = \"TODO-APP\";\nfunction App() {\n  const [todolist, setTodolist] = useState([]);\n  const [textInput, setTextInput] = useState([]);\n  useEffect(() => {\n    if (localStorage.getItem(TODO_APP_STORAGE_KEY))\n      setTodolist(JSON.parse(localStorage.getItem(TODO_APP_STORAGE_KEY)));\n  }, []);\n\n  //  lưu todolist vào localStorage\n  useEffect(() => {\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todolist));\n  }, [todolist]);\n\n  const handlTodoList = useCallback(() => {\n    setTodolist((prev) => [\n      {\n        id: v4(),\n        name: textInput,\n        iscompleted: false,\n      },\n      ...prev,\n    ]);\n    setTextInput(\"\");\n  }, [textInput, todolist]);\n\n  const checkBtnInput = useCallback((id) => {\n    setTodolist((prev) =>\n      prev.map((todo) =>\n        todo.id === id ? { ...todo, iscompleted: true } : todo\n      )\n    );\n  }, []);\n  return (\n    <div className=\"app dark light\">\n      <div className=\"todo-app\">\n        <h3>Day la todo app</h3>\n        <Textfield\n          value={textInput}\n          onChange={(e) => setTextInput(e.target.value)}\n          name=\"Todo-app\"\n          placeholder=\"thêm việc cần làm\"\n          elemAfterInput={\n            <>\n              <Button\n                appearance={\"primary\"}\n                isDisabled={!textInput}\n                onClick={handlTodoList}\n              >\n                Add\n              </Button>\n            </>\n          }\n        />\n        <Todolist todolist={todolist} checkBtnInput={checkBtnInput}></Todolist>\n        <Button\n          appearance={\"primary\"}\n          isDisabled={false}\n          onClick={() => setTodolist([])}\n        >\n          Remove\n        </Button>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}